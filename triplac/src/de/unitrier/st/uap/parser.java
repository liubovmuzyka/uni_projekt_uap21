
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 03 21:27:43 CET 2022
//----------------------------------------------------

package de.unitrier.st.uap;

import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import de.unitrier.st.uap.nodes.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 03 21:27:43 CET 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\006\000\002\002" +
    "\003\000\002\002\006\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\003\000\002\002\005\000\002\002\005\000\002" +
    "\002\010\000\002\002\010\000\002\005\003\000\002\005" +
    "\003\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\004\003\000\002\004" +
    "\005\000\002\003\011\000\002\003\004\000\002\006\003" +
    "\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\016\004\006\006\011\011\010\013\012\036" +
    "\005\037\004\001\002\000\052\002\ufff8\007\ufff8\010\ufff8" +
    "\012\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\001\002\000\056\002" +
    "\uffff\007\uffff\010\uffff\012\uffff\013\113\014\uffff\016\uffff" +
    "\017\uffff\020\uffff\021\114\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff" +
    "\034\uffff\035\uffff\001\002\000\004\036\075\001\002\000" +
    "\016\002\074\017\020\032\017\033\015\034\021\035\016" +
    "\001\002\000\022\004\006\006\011\011\010\013\030\036" +
    "\005\037\004\040\027\041\031\001\002\000\022\004\006" +
    "\006\011\011\010\013\030\036\005\037\004\040\027\041" +
    "\031\001\002\000\016\004\006\006\011\011\010\013\012" +
    "\036\005\037\004\001\002\000\016\014\014\017\020\032" +
    "\017\033\015\034\021\035\016\001\002\000\052\002\ufff9" +
    "\007\ufff9\010\ufff9\012\ufff9\014\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\001" +
    "\002\000\016\004\006\006\011\011\010\013\012\036\005" +
    "\037\004\001\002\000\016\004\006\006\011\011\010\013" +
    "\012\036\005\037\004\001\002\000\016\004\006\006\011" +
    "\011\010\013\012\036\005\037\004\001\002\000\016\004" +
    "\006\006\011\011\010\013\012\036\005\037\004\001\002" +
    "\000\016\004\006\006\011\011\010\013\012\036\005\037" +
    "\004\001\002\000\052\002\ufffb\007\ufffb\010\ufffb\012\ufffb" +
    "\014\ufffb\016\ufffb\017\ufffb\020\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\035\ufffb\001\002\000\052\002\ufff6\007" +
    "\ufff6\010\ufff6\012\ufff6\014\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\017\033\015\034\021\035\016\001\002" +
    "\000\052\002\ufffd\007\ufffd\010\ufffd\012\ufffd\014\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\021\035\016\001\002\000\052\002\ufffa\007\ufffa\010\ufffa" +
    "\012\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\001\002\000\052\002" +
    "\ufffc\007\ufffc\010\ufffc\012\ufffc\014\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\021\035\016" +
    "\001\002\000\020\007\ufff3\012\ufff3\014\ufff3\022\ufff3\023" +
    "\ufff3\030\ufff3\031\ufff3\001\002\000\022\004\006\006\011" +
    "\011\010\013\030\036\005\037\004\040\027\041\031\001" +
    "\002\000\020\007\ufff2\012\ufff2\014\ufff2\022\ufff2\023\ufff2" +
    "\030\ufff2\031\ufff2\001\002\000\014\007\051\022\053\023" +
    "\052\030\050\031\054\001\002\000\030\017\020\022\035" +
    "\023\036\024\040\025\037\026\041\027\034\032\017\033" +
    "\015\034\021\035\016\001\002\000\016\004\006\006\011" +
    "\011\010\013\012\036\005\037\004\001\002\000\016\004" +
    "\006\006\011\011\010\013\012\036\005\037\004\001\002" +
    "\000\016\004\006\006\011\011\010\013\012\036\005\037" +
    "\004\001\002\000\016\004\006\006\011\011\010\013\012" +
    "\036\005\037\004\001\002\000\016\004\006\006\011\011" +
    "\010\013\012\036\005\037\004\001\002\000\016\004\006" +
    "\006\011\011\010\013\012\036\005\037\004\001\002\000" +
    "\032\007\uffec\012\uffec\014\uffec\017\020\022\uffec\023\uffec" +
    "\030\uffec\031\uffec\032\017\033\015\034\021\035\016\001" +
    "\002\000\032\007\uffee\012\uffee\014\uffee\017\020\022\uffee" +
    "\023\uffee\030\uffee\031\uffee\032\017\033\015\034\021\035" +
    "\016\001\002\000\032\007\uffed\012\uffed\014\uffed\017\020" +
    "\022\uffed\023\uffed\030\uffed\031\uffed\032\017\033\015\034" +
    "\021\035\016\001\002\000\032\007\uffef\012\uffef\014\uffef" +
    "\017\020\022\uffef\023\uffef\030\uffef\031\uffef\032\017\033" +
    "\015\034\021\035\016\001\002\000\032\007\ufff0\012\ufff0" +
    "\014\ufff0\017\020\022\ufff0\023\ufff0\030\ufff0\031\ufff0\032" +
    "\017\033\015\034\021\035\016\001\002\000\032\007\uffeb" +
    "\012\uffeb\014\uffeb\017\020\022\uffeb\023\uffeb\030\uffeb\031" +
    "\uffeb\032\017\033\015\034\021\035\016\001\002\000\022" +
    "\004\006\006\011\011\010\013\030\036\005\037\004\040" +
    "\027\041\031\001\002\000\016\004\006\006\011\011\010" +
    "\013\012\036\005\037\004\001\002\000\022\004\006\006" +
    "\011\011\010\013\030\036\005\037\004\040\027\041\031" +
    "\001\002\000\022\004\006\006\011\011\010\013\030\036" +
    "\005\037\004\040\027\041\031\001\002\000\022\004\006" +
    "\006\011\011\010\013\030\036\005\037\004\040\027\041" +
    "\031\001\002\000\020\007\uffe7\012\uffe7\014\uffe7\022\uffe7" +
    "\023\uffe7\030\050\031\uffe7\001\002\000\014\007\uffea\012" +
    "\uffea\014\uffea\030\050\031\054\001\002\000\014\007\uffe9" +
    "\012\uffe9\014\uffe9\030\050\031\054\001\002\000\016\010" +
    "\061\017\020\032\017\033\015\034\021\035\016\001\002" +
    "\000\016\004\006\006\011\011\010\013\012\036\005\037" +
    "\004\001\002\000\052\002\ufff5\007\ufff5\010\ufff5\012\ufff5" +
    "\014\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\017" +
    "\033\015\034\021\035\016\001\002\000\020\007\uffe8\012" +
    "\uffe8\014\uffe8\022\uffe8\023\uffe8\030\uffe8\031\uffe8\001\002" +
    "\000\014\014\066\022\053\023\052\030\050\031\054\001" +
    "\002\000\032\014\014\017\020\022\035\023\036\024\040" +
    "\025\037\026\041\027\034\032\017\033\015\034\021\035" +
    "\016\001\002\000\020\007\ufff1\012\ufff1\014\ufff1\022\ufff1" +
    "\023\ufff1\030\ufff1\031\ufff1\001\002\000\014\012\070\022" +
    "\053\023\052\030\050\031\054\001\002\000\004\015\071" +
    "\001\002\000\016\004\006\006\011\011\010\013\012\036" +
    "\005\037\004\001\002\000\016\016\073\017\020\032\017" +
    "\033\015\034\021\035\016\001\002\000\052\002\ufff4\007" +
    "\ufff4\010\ufff4\012\ufff4\014\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\001\002" +
    "\000\004\002\001\001\002\000\004\013\102\001\002\000" +
    "\006\005\077\036\075\001\002\000\016\004\006\006\011" +
    "\011\010\013\012\036\005\037\004\001\002\000\006\005" +
    "\uffe3\036\075\001\002\000\052\002\000\007\000\010\000" +
    "\012\000\014\000\016\000\017\020\020\000\022\000\023" +
    "\000\024\000\025\000\026\000\027\000\030\000\031\000" +
    "\032\017\033\015\034\021\035\016\001\002\000\004\036" +
    "\103\001\002\000\006\014\uffe2\020\uffe2\001\002\000\006" +
    "\014\106\020\105\001\002\000\004\036\103\001\002\000" +
    "\004\015\107\001\002\000\016\004\006\006\011\011\010" +
    "\013\012\036\005\037\004\001\002\000\016\016\111\017" +
    "\020\032\017\033\015\034\021\035\016\001\002\000\006" +
    "\005\uffe4\036\uffe4\001\002\000\006\014\uffe1\020\uffe1\001" +
    "\002\000\016\004\006\006\011\011\010\013\012\036\005" +
    "\037\004\001\002\000\016\004\006\006\011\011\010\013" +
    "\012\036\005\037\004\001\002\000\052\002\ufff7\007\ufff7" +
    "\010\ufff7\012\ufff7\014\ufff7\016\ufff7\017\ufff7\020\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\017\033\015\034\021\035\016\001\002\000" +
    "\006\014\121\020\120\001\002\000\020\014\uffe6\017\020" +
    "\020\uffe6\032\017\033\015\034\021\035\016\001\002\000" +
    "\016\004\006\006\011\011\010\013\012\036\005\037\004" +
    "\001\002\000\052\002\ufffe\007\ufffe\010\ufffe\012\ufffe\014" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\034\ufffe\035\ufffe\001\002\000\020\014\uffe5\017\020" +
    "\020\uffe5\032\017\033\015\034\021\035\016\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\075\001\001\000\002\001\001" +
    "\000\006\002\032\005\066\001\001\000\006\002\032\005" +
    "\031\001\001\000\004\002\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\025\001\001\000\004\002" +
    "\024\001\001\000\004\002\023\001\001\000\004\002\022" +
    "\001\001\000\004\002\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\064\005\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\046\001\001\000\004\002\045\001\001\000" +
    "\004\002\044\001\001\000\004\002\043\001\001\000\004" +
    "\002\042\001\001\000\004\002\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\032\005" +
    "\062\001\001\000\004\002\057\001\001\000\006\002\032" +
    "\005\056\001\001\000\006\002\032\005\055\001\001\000" +
    "\006\002\032\005\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\077\001\001\000\004\002\100\001\001" +
    "\000\004\003\077\001\001\000\002\001\001\000\004\006" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\111\001\001\000\002\001\001\000\004\002\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\116\004\115\001\001\000\004\002\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\121\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /*
     * Extended error reporting with line and column numbers
     * provided by the given Symbol object
     */
    public void report_error(String message, Object info)
    {
        String str = "Error";

        if (info instanceof Symbol)
        {
            Symbol symbol = ((Symbol) info);

            if (symbol.left >= 0)
            {
                str += " at line " + (symbol.left+1);

                if (symbol.right >= 0)
                {
                    str += ", column " + (symbol.right+1);
                }
            }
            
            str += ", " + symbol.value;
        }

        str += " : " + message;

        System.err.println(str);
    }


    /*
     * Extended fatal error reporting with line and column numbers
     * provided by the given Symbol object
     */
    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        System.exit(1);
    }

    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // V ::= V COMMA V 
            {
              Node RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node v1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node v2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("V, V");
        Node node = new CommaNode();
        node.addChild(v1);
        node.addChild(v2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("V",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // V ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("V");
        Node node = new IdentifierNode(id);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("V",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // D ::= D D 
            {
              Node RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node d1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node d2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("D D");
        Node node = new DefDefNode();
        node.addChild(d1);
        node.addChild(d2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // D ::= ID STARTBR V ENDBR STARTCB E ENDCB 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node v = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println("DEF");
        Node node = new DefinitionNode();
        node.addChild(new IdentifierNode(id));
        node.addChild(v);
        node.addChild(e);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("D",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // A ::= A COMMA E 
            {
              Node RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node a1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("A COMMA");
        Node node = new CommaNode();
        node.addChild(a1);
        node.addChild(e1);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // A ::= E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("A");
        RESULT = e1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= EXP OR EXP 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("C OR C");
        Node node = new OpNode("||");
        node.addChild(exp1);
        node.addChild(exp2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= EXP AND EXP 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("C AND C");
        Node node = new OpNode("&&");
        node.addChild(exp1);
        node.addChild(exp2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= EXP NEQ EXP 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("C != C");
        Node node = new OpNode("!=");
        node.addChild(exp1);
        node.addChild(exp2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= EXP EQEQ EXP 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("C == C");
        Node node = new OpNode("==");
        node.addChild(exp1);
        node.addChild(exp2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= E LOE E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("E <= E");
        Node node = new OpNode("<=");
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= E GOE E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("E >= E");
        Node node = new OpNode(">=");
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= E GT E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("E > E");
        Node node = new OpNode(">");
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= E LT E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("E < E");
        Node node = new OpNode("<");
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= E NEQ E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("E != E");
        Node node = new OpNode("!=");
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= E EQEQ E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("E == E");
        Node node = new OpNode("==");
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= STARTBR EXP ENDBR 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println("(C)");
        Node node = new InBrNode();
        node.addChild(exp);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= FALSE 
            {
              Node RESULT =null;
		
        RESULT = new ConstNode(0);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= TRUE 
            {
              Node RESULT =null;
		
        RESULT = new ConstNode(1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= WHILE EXP DO STARTCB E ENDCB 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println("WHILE");
        Node node = new WhileNode();
        node.addChild(exp);
        node.addChild(e1);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= IF EXP THEN E ELSE E 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("IF");
        Node node = new IfNode();
        node.addChild(exp);
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= E SEMI E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("SEMI");
        Node node = new SemiNode();
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= ID ASSIGN E 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("ASSIGN");
        Node node = new SetNode();
        node.addChild(new IdentifierNode(id));
        node.addChild(e);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= CONST 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("CONST");
        RESULT = new ConstNode(c);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= STARTBR E ENDBR 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println("(E)");
        Node node = new InBrNode();
        node.addChild(e);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= E MULT E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("MUL");
        Node node = new OpNode("*");
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= E DIV E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("DIV");
        Node node = new OpNode("/");
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E ::= E MIN E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("MIN");
        Node node = new OpNode("-");
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E ::= E PLUS E 
            {
              Node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node e1 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e2 = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("PLUS");
        Node node = new OpNode("+");
        node.addChild(e1);
        node.addChild(e2);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // E ::= ID STARTBR A ENDBR 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node a = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("CALL");
        Node node = new CallNode();
        node.addChild(new IdentifierNode(id));
        node.addChild(a);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // E ::= ID 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("ID");
        Node node = new IdentifierNode(id);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // E ::= LET D IN E 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Node d = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("Let");
        Node node = new LetNode();
        node.addChild(d);
        node.addChild(e);
        RESULT = node;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= E EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

